#!/bin/bash
#========================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Armbian for rockchip boxes
# https://github.com/ophub/rockchip-armbian
#
# Description: Run on x86_64 Ubuntu-20.04/22.04, Build armbian for rockchip boxes
# Copyright (C) 2021- https://github.com/unifreq
# Copyright (C) 2021- https://github.com/ophub/rockchip-armbian
#
# Command: sudo ./rebuild
# Command optional parameters please refer to the source code repository
#
#==================================== Functions list ====================================
#
# error_msg          : Output error message
# process_msg        : Output process message
#
# init_var           : Initialize all variables
# find_armbian       : Find Armbian file (build/output/images/*.img)
# download_depends   : Download the dependency files
# query_version      : Query the latest kernel version
# download_kernel    : Download the latest kernel
#
# confirm_version    : Confirm version type
# extract_armbian    : Extract Armbian files
# make_image         : Making Armbian file
# copy_files         : Copy the Armbian files
# refactor_files     : Refactor related files
# clean_tmp          : Clear temporary files
#
# loop_rebuild       : Loop to rebuild Armbian files
#
#============================ Set make environment variables ============================
#
# Related file storage path
make_path="${PWD}"
armbian_outputpath="${make_path}/build/output/images"
armbian_rebuild_file="${armbian_outputpath}/*.img"
build_path="${make_path}/build-armbian"
kernel_path="${build_path}/rockchip-kernel"
uboot_path="${build_path}/u-boot"
common_files="${build_path}/common-files"
firmware_path="${common_files}/rootfs/usr/lib/firmware"
model_conf="${common_files}/rootfs/etc/model_database.conf"
tmp_dir="${make_path}/tmp_dir"
tmp_outpath="${tmp_dir}/tmp_out"
tmp_armbian="${tmp_dir}/tmp_armbian"
tmp_build="${tmp_dir}/tmp_build"
tmp_aml_image="${tmp_dir}/tmp_aml_image"

arch_info="$(arch)"
host_release="$(cat /etc/os-release | grep '^VERSION_CODENAME=.*' | cut -d'=' -f2)"
# Get armbian ${VERSION_CODENAME}: such as [ jammy ]
os_release_file="etc/os-release"
# Set banner's ${BOARD_NAME}: such as [ rock5b ]
armbian_release_file="etc/armbian-release"
# Add custom armbian firmware information
ophub_release_file="etc/ophub-release"

# Dependency files download repository
depends_repo="https://github.com/ophub/amlogic-s9xxx-armbian/tree/main/build-armbian"
# Convert dependency library address to svn format
depends_repo="${depends_repo//tree\/main/trunk}"

# Firmware files download repository
firmware_repo="https://github.com/ophub/firmware/tree/main/firmware"
# Convert firmware library address to svn format
firmware_repo="${firmware_repo//tree\/main/trunk}"

# Kernel files download repository
kernel_repo="https://github.com/ophub/kernel/tree/main/pub"
# Convert kernel library address to svn format
kernel_repo="${kernel_repo//tree\/main/trunk}"
version_branch=("stable" "rk3588")
stable_kernel=("6.0.5")
rk3588_kernel=("5.10.150")
auto_kernel="true"

# Set supported board
build_armbian=(
    "rock5b"
    "r66s" "r68s"
    "beikeyun" "l1pro"
)

# Set Armbian firmware size (Unit: MiB, SKIP_MB >= 4, BOOT_MB >= 256, ROOT_MB >= 2048)
SKIP_MB="16"
BOOT_MB="256"
ROOT_MB="2560"
# Set ROOTFS partition file system type, options: [ ext4 / btrfs ]
ROOTFS_TYPE="ext4"
# Custom name in firmware name: ${build_image_file}, such as _server, _dev, etc.
custom_name="_server"

# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
WARNING="[\033[93m WARNING \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#========================================================================================

error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

process_msg() {
    echo -e " [\033[1;92m ${board} - ${kernel} \033[0m] ${1}"
}

init_var() {
    echo -e "${STEPS} Start Initializing Variables..."

    # If it is followed by [ : ], it means that the option requires a parameter value
    get_all_ver="$(getopt "db:k:a:s:t:n:" "${@}")"

    while [[ -n "${1}" ]]; do
        case "${1}" in
        -b | --Board)
            if [[ -n "${2}" ]]; then
                if [[ "${2}" != "all" ]]; then
                    unset build_armbian
                    oldIFS=$IFS
                    IFS=_
                    build_armbian=(${2})
                    IFS=$oldIFS
                fi
                shift
            else
                error_msg "Invalid -b parameter [ ${2} ]!"
            fi
            ;;
        -k | --Kernel)
            if [[ -n "${2}" ]]; then
                oldIFS=$IFS
                IFS=_
                stable_kernel=(${2})
                IFS=$oldIFS
                shift
            else
                error_msg "Invalid -k parameter [ ${2} ]!"
            fi
            ;;
        -a | --Autokernel)
            if [[ -n "${2}" ]]; then
                auto_kernel="${2}"
                shift
            else
                error_msg "Invalid -a parameter [ ${2} ]!"
            fi
            ;;
        -s | --Size)
            if [[ -n "${2}" && "${2}" -ge "2048" ]]; then
                ROOT_MB="${2}"
                shift
            else
                error_msg "Invalid -s parameter [ ${2} ]!"
            fi
            ;;
        -t | --rootfsType)
            if [[ -n "${2}" ]]; then
                ROOTFS_TYPE="${2}"
                shift
            else
                error_msg "Invalid -t parameter [ ${2} ]!"
            fi
            ;;
        -n | --customName)
            if [[ -n "${2}" ]]; then
                custom_name="${2// /}"
                shift
            else
                error_msg "Invalid -n parameter [ ${2} ]!"
            fi
            ;;
        *)
            error_msg "Invalid option [ ${1} ]!"
            ;;
        esac
        shift
    done
}

find_armbian() {
    cd ${make_path}
    echo -e "${STEPS} Start searching for Armbian file..."

    # Get armbian release and version
    armbian_rebuild_name="$(ls ${armbian_rebuild_file} 2>/dev/null | head -n 1 | awk -F "/" '{print $NF}')"
    [[ -n "${armbian_rebuild_name}" ]] || error_msg "The armbian original file does not exist: [ ${armbian_rebuild_file} ]"

    # Find armbian version info: such as [ 22.02.0 ]
    armbian_rebuild_version="$(echo ${armbian_rebuild_name} | grep -oE '[2-9][2-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
    [[ -n "${armbian_rebuild_version}" ]] || {
        armbian_rebuild_version="22.02.02"
        echo -e "${WARNING} Missing Armbian release version info!"
    }

    echo -e "${INFO} Armbian rebuild file: [ ${armbian_rebuild_name} ], Version: [ ${armbian_rebuild_version} ]"
}

download_depends() {
    cd ${make_path}
    echo -e "${STEPS} Start downloading dependency files..."

    # Download generic firmware
    mkdir -p ${firmware_path}
    svn export ${firmware_repo} ${firmware_path} --force

    # Download software service related files
    mkdir -p ${common_files}/rootfs/usr/share/ophub
    svn export ${depends_repo}/armbian-files/common-files/usr/share/ophub ${common_files}/rootfs/usr/share/ophub --force
    find ${common_files}/rootfs/usr/share/ophub -type f -name '*.sh' -exec chmod +x {} \;

    # Download main service related files
    mkdir -p ${common_files}/rootfs/usr/sbin
    svn export ${depends_repo}/armbian-files/common-files/usr/sbin ${common_files}/rootfs/usr/sbin --force
}

query_version() {
    echo -e "${STEPS} Start querying the latest kernel version..."

    # Convert kernel library address to API format
    server_kernel_url="${kernel_repo#*com\/}"
    server_kernel_url="${server_kernel_url//trunk/contents}"
    server_kernel_url="https://api.github.com/repos/${server_kernel_url}"

    # Query the latest kernel in a loop
    x="1"
    for vb in ${version_branch[*]}; do
        {
            # Select the corresponding kernel directory and list
            if [[ "${vb}" == "stable" ]]; then
                down_kernel_list="${stable_kernel[*]}"
            elif [[ "${vb}" == "rk3588" ]]; then
                down_kernel_list="${rk3588_kernel[*]}"
            fi

            # Set empty array
            tmp_arr_kernels=()

            # Query the latest kernel in a loop
            i="1"
            for KERNEL_VAR in ${down_kernel_list[*]}; do
                echo -e "${INFO} (${x}.${i}) Auto query the latest kernel version of the same series for [ ${vb} - ${KERNEL_VAR} ]"
                # Identify the kernel mainline
                MAIN_LINE="$(echo ${KERNEL_VAR} | awk -F '.' '{print $1"."$2}')"
                # Check the version on the server (e.g LATEST_VERSION="125")
                LATEST_VERSION="$(curl -s "${server_kernel_url}/${vb}" | grep "name" | grep -oE "${MAIN_LINE}\.[0-9]+" | sed -e "s/${MAIN_LINE}\.//g" | sort -n | sed -n '$p')"
                if [[ "${?}" -eq "0" && -n "${LATEST_VERSION}" ]]; then
                    tmp_arr_kernels[${i}]="${MAIN_LINE}.${LATEST_VERSION}"
                else
                    tmp_arr_kernels[${i}]="${KERNEL_VAR}"
                fi
                echo -e "${INFO} (${x}.${i}) [ ${vb} - ${tmp_arr_kernels[$i]} ] is latest kernel. \n"

                let i++
            done

            # Reset the kernel array to the latest kernel version
            if [[ "${vb}" == "stable" ]]; then
                unset stable_kernel
                stable_kernel="${tmp_arr_kernels[*]}"
            elif [[ "${vb}" == "rk3588" ]]; then
                unset rk3588_kernel
                rk3588_kernel="${tmp_arr_kernels[*]}"
            fi

            let x++
        }
    done
}

download_kernel() {
    cd ${make_path}
    echo -e "${STEPS} Start downloading the kernel files..."

    x="1"
    for vb in ${version_branch[*]}; do
        {
            # Set a different kernel download list
            if [[ "${vb}" == "stable" ]]; then
                down_kernel_list="${stable_kernel[*]}"
            elif [[ "${vb}" == "rk3588" ]]; then
                down_kernel_list="${rk3588_kernel[*]}"
            fi

            i="1"
            for KERNEL_VAR in ${down_kernel_list[*]}; do
                {
                    if [[ ! -d "${kernel_path}/${vb}/${KERNEL_VAR}" ]]; then
                        echo -e "${INFO} (${x}.${i}) [ ${vb} - ${KERNEL_VAR} ] Kernel loading from [ ${kernel_repo/trunk/tree\/main}/${vb}/${KERNEL_VAR} ]"
                        svn export ${kernel_repo}/${vb}/${KERNEL_VAR} ${kernel_path}/${vb}/${KERNEL_VAR} --force
                    else
                        echo -e "${INFO} (${x}.${i}) [ ${vb} - ${KERNEL_VAR} ] Kernel is in the local directory."
                    fi

                    let i++
                }
            done
            let x++
        }
    done
}

confirm_version() {
    cd ${make_path}

    # Find [ the first ] configuration information with [ the same BOARD name ] and [ BUILD as yes ] in the ${model_conf} file.
    [[ -f "${model_conf}" ]] || error_msg "[ ${model_conf} ] file is missing!"
    board_conf="$(cat ${model_conf} | sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' | grep -E "^[^#].*:${board}:yes$" | head -n 1)"
    [[ -n "${board_conf}" ]] || error_msg "[ ${board} ] config is missing!"

    # 1.ID  2.MODEL  3.SOC  4.FDTFILE  5.BOOTLOADER_IMG  6.MAINLINE_UBOOT  7.KERNEL_BRANCH  8.FAMILY  9.BOARD  10.BUILD
    MODEL_NAME="$(echo ${board_conf} | awk -F':' '{print $2}')"
    SOC="$(echo ${board_conf} | awk -F':' '{print $3}')"
    FDTFILE="$(echo ${board_conf} | awk -F':' '{print $4}')"
    BOOTLOADER_IMG="$(echo ${board_conf} | awk -F':' '{print $5}')"
    MAINLINE_UBOOT="$(echo ${board_conf} | awk -F':' '{print $6}')"
    KERNEL_BRANCH="$(echo ${board_conf} | awk -F':' '{print $7}')"
    FAMILY="$(echo ${board_conf} | awk -F':' '{print $8}')"
}

extract_armbian() {
    process_msg " (1/5) Extract old armbian files."
    cd ${make_path}

    rm -rf ${tmp_dir} 2>/dev/null
    mkdir -p ${tmp_outpath} ${tmp_armbian} ${tmp_build} ${tmp_aml_image}

    armbian_image_file="${tmp_aml_image}/armbian_${board}_${kernel}.img"
    rm -f ${armbian_image_file} 2>/dev/null
    cp -f "${armbian_outputpath}/${armbian_rebuild_name}" "${armbian_image_file}"

    loop_old="$(losetup -P -f --show "${armbian_image_file}")"
    [[ -n "${loop_old}" ]] || error_msg "losetup ${armbian_image_file} failed."

    if ! mount ${loop_old}p2 ${tmp_armbian}; then
        error_msg "mount ${loop_old}p2 failed!"
    fi

    cd ${tmp_armbian}

    # Find ID in ${os_release_file}: such as [ubuntu/debian]
    release_codeid="$(cat ${os_release_file} | grep -oE "^ID=.*" | cut -d"=" -f2)"
    [[ -z "${release_codeid}" ]] && error_msg "The [ ${os_release_file}: ID ] is invalid."
    # Find VERSION_CODENAME in ${os_release_file}: such as [jammy/focal/bullseye]
    release_codename="$(cat ${os_release_file} | grep -oE "^VERSION_CODENAME=.*" | cut -d"=" -f2)"
    [[ -z "${release_codename}" ]] && error_msg "The [ ${os_release_file}: VERSION_CODENAME ] is invalid."

    # Delete all files of /boot partition and replace it later
    rm -rf boot/* 2>/dev/null
    # Delete the kernel files and replace it later
    rm -rf usr/lib/modules/* 2>/dev/null
    # Delete the symbolic link files and relink it later
    rm -rf bin lib sbin var/lock var/run 2>/dev/null
}

make_image() {
    process_msg " (2/5) Make new armbian image."
    cd ${make_path}

    # Confirm UUID
    BOOT_UUID="$(cat /proc/sys/kernel/random/uuid)"
    [[ -z "${BOOT_UUID}" ]] && BOOT_UUID="$(uuidgen)"
    [[ -z "${BOOT_UUID}" ]] && error_msg "The uuidgen is invalid, cannot continue."
    #
    ROOTFS_UUID="$(cat /proc/sys/kernel/random/uuid)"
    [[ -z "${ROOTFS_UUID}" ]] && ROOTFS_UUID="$(uuidgen)"
    [[ -z "${ROOTFS_UUID}" ]] && error_msg "The uuidgen is invalid, cannot continue."

    # Set the type of file system
    if [[ "${ROOTFS_TYPE}" == "btrfs" ]]; then
        uenv_rootdev="UUID=${ROOTFS_UUID}"
        uenv_rootflags="compress=zstd:6"
        fstab_string="defaults,noatime,compress=zstd:6"
    else
        uenv_rootdev="UUID=${ROOTFS_UUID}"
        uenv_rootflags="rw,errors=remount-ro"
        fstab_string="defaults,noatime,commit=600,errors=remount-ro"
    fi

    # Make armbian
    build_image_file="${tmp_outpath}/Armbian_${armbian_rebuild_version}_Rockchip_${board}_${release_codename}_${kernel}${custom_name}_$(date +"%Y.%m.%d").img"
    rm -f ${build_image_file} 2>/dev/null

    IMG_SIZE="$((SKIP_MB + BOOT_MB + ROOT_MB))"

    dd if=/dev/zero of=${build_image_file} bs=1M count=${IMG_SIZE} conv=fsync >/dev/null 2>&1

    parted -s ${build_image_file} mklabel gpt 2>/dev/null
    parted -s ${build_image_file} mkpart primary ext4 $((SKIP_MB))MiB $((SKIP_MB + BOOT_MB - 1))MiB 2>/dev/null
    parted -s ${build_image_file} mkpart primary ${ROOTFS_TYPE} $((SKIP_MB + BOOT_MB))MiB 100% 2>/dev/null

    loop_new="$(losetup -P -f --show "${build_image_file}")"
    [[ -n "${loop_new}" ]] || error_msg "losetup ${build_image_file} failed."

    mkfs.ext4 -F -q -U ${BOOT_UUID} -L "BOOT" -b 4k -m 0 ${loop_new}p1 >/dev/null 2>&1
    if [[ "${ROOTFS_TYPE}" == "btrfs" ]]; then
        mkfs.btrfs -f -U ${ROOTFS_UUID} -L "ROOTFS" -m single ${loop_new}p2 >/dev/null 2>&1
    else
        mkfs.ext4 -F -q -U ${ROOTFS_UUID} -L "ROOTFS" -b 4k -m 0 ${loop_new}p2 >/dev/null 2>&1
    fi

    # Write the specified bootloader
    if [[ -n "${BOOTLOADER_IMG}" && -n ${MAINLINE_UBOOT} ]]; then
        dd if="${uboot_path}/${board}/${BOOTLOADER_IMG}" of="${loop_new}" conv=fsync,notrunc bs=512 seek=64 2>/dev/null
        dd if="${uboot_path}/${board}/${MAINLINE_UBOOT}" of="${loop_new}" conv=fsync,notrunc bs=512 seek=16384 2>/dev/null
    elif [[ -n "${BOOTLOADER_IMG}" ]]; then
        dd if="${uboot_path}/${board}/${BOOTLOADER_IMG}" of="${loop_new}" conv=fsync,notrunc bs=512 skip=64 seek=64 2>/dev/null
    fi
}

copy_files() {
    process_msg " (3/5) Copy the Armbian files."
    cd ${make_path}

    # Create a dual-partition general directory
    tag_bootfs="${tmp_build}/bootfs"
    tag_rootfs="${tmp_build}/rootfs"
    mkdir -p ${tag_bootfs} ${tag_rootfs}

    if ! mount ${loop_new}p1 ${tag_bootfs}; then
        error_msg "mount ${loop_new}p1 failed!"
    fi
    if ! mount ${loop_new}p2 ${tag_rootfs}; then
        error_msg "mount ${loop_new}p2 failed!"
    fi

    # Copy the full Armbian image
    cp -af ${tmp_armbian}/* ${tag_rootfs}
}

refactor_files() {
    process_msg " (4/5) Refactor related files."
    cd ${make_path}

    # Copy the same files
    [[ "$(ls ${common_files}/bootfs/${board} 2>/dev/null | wc -w)" -ne "0" ]] && cp -rf ${common_files}/bootfs/${board}/* ${tag_bootfs}
    [[ "$(ls ${common_files}/rootfs 2>/dev/null | wc -w)" -ne "0" ]] && cp -rf ${common_files}/rootfs/* ${tag_rootfs}

    # Copy the bootloader files
    [[ -d "${tag_rootfs}/usr/lib/u-boot" ]] || mkdir -p ${tag_rootfs}/usr/lib/u-boot
    cp -rf ${uboot_path}/${board}/* ${tag_rootfs}/usr/lib/u-boot

    # Replace the kernel
    kernel_boot="$(ls ${kernel_path}/${KERNEL_BRANCH}/${kernel}/boot-${kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_dtb="$(ls ${kernel_path}/${KERNEL_BRANCH}/${kernel}/dtb-rockchip-${kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_modules="$(ls ${kernel_path}/${KERNEL_BRANCH}/${kernel}/modules-${kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_header="$(ls ${kernel_path}/${KERNEL_BRANCH}/${kernel}/header-${kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_name="${kernel_boot##*/}" && kernel_name="${kernel_name/boot-/}" && kernel_name="${kernel_name/.tar.gz/}"
    [[ -n "${kernel_boot}" && -n "${kernel_dtb}" && -n "${kernel_modules}" && -n "${kernel_header}" ]] || error_msg "The 4 kernel missing."

    # 01. For /boot five files
    tar -xzf ${kernel_boot} -C ${tag_bootfs}
    (cd ${tag_bootfs} && ln -sf uInitrd-${kernel_name} uInitrd && ln -sf vmlinuz-${kernel_name} Image)
    [[ "$(ls ${tag_bootfs}/*-${kernel}-* -l 2>/dev/null | grep "^-" | wc -l)" -ge "4" ]] || error_msg "The /boot files is missing."

    # 02. For /boot/dtb/rockchip/*
    mkdir -p ${tag_bootfs}/dtb-${kernel_name}/rockchip && ln -sf dtb-${kernel_name} ${tag_bootfs}/dtb
    tar -xzf ${kernel_dtb} -C ${tag_bootfs}/dtb-${kernel_name}/rockchip
    [[ "$(ls ${tag_bootfs}/dtb/rockchip -l 2>/dev/null | grep "^-" | wc -l)" -ge "2" ]] || error_msg "/boot/dtb/rockchip files is missing."

    # 03. For /usr/src/linux-headers-${kernel_name}
    header_path="linux-headers-${kernel_name}"
    rm -rf ${tag_rootfs}/usr/src/linux-headers-* 2>/dev/null && mkdir -p "${tag_rootfs}/usr/src/${header_path}"
    tar -xzf ${kernel_header} -C ${tag_rootfs}/usr/src/${header_path}
    [[ -d "${tag_rootfs}/usr/src/${header_path}/include" ]] || error_msg "/usr/src/${header_path}/include folder is missing."

    # 04. For /usr/lib/modules/${kernel_name}
    tar -xzf ${kernel_modules} -C ${tag_rootfs}/usr/lib/modules
    (cd ${tag_rootfs}/usr/lib/modules/${kernel_name}/ && rm -f build source 2>/dev/null && ln -sf /usr/src/${header_path} build)
    [[ "$(ls ${tag_rootfs}/usr/lib/modules/${kernel_name} -l 2>/dev/null | grep "^d" | wc -l)" -eq "1" ]] || error_msg "/usr/lib/modules kernel folder is missing."

    # Processing partition files: bootfs
    cd ${tag_bootfs}

    # Edit the armbianEnv.txt
    boot_conf_file="armbianEnv.txt"
    [[ -f "${boot_conf_file}" ]] || error_msg "The [ ${boot_conf_file} ] file does not exist."
    sed -i "s|fdtfile.*|fdtfile=rockchip/${FDTFILE}|g" ${boot_conf_file}
    sed -i "s|rootdev=.*|rootdev=${uenv_rootdev}|g" ${boot_conf_file}
    sed -i "s|rootfstype=.*|rootfstype=${ROOTFS_TYPE}|g" ${boot_conf_file}
    sed -i "s|rootflags.*|rootflags=${uenv_rootflags}|g" ${boot_conf_file}

    # Processing partition files: rootfs
    cd ${tag_rootfs}

    # Delete related files
    rm -f etc/apt/sources.list.save 2>/dev/null
    rm -f etc/apt/sources.list.d/* 2>/dev/null
    rm -f etc/apt/*.gpg~ 2>/dev/null
    #rm -f etc/systemd/system/basic.target.wants/armbian-resize-filesystem.service 2>/dev/null
    rm -rf usr/share/doc/linux-image-* 2>/dev/null
    rm -rf usr/lib/linux-image-* 2>/dev/null
    rm -f usr/sbin/ddbr 2>/dev/null
    rm -f var/lib/dpkg/info/linux-image-* 2>/dev/null

    # Fix common releases permissions
    [[ -d "var/tmp" ]] && chmod 777 var/tmp
    [[ -d "etc/update-motd.d" ]] && chmod 755 etc/update-motd.d/*
    [[ -d "var/cache/man" ]] && chown man:root var/cache/man -R
    [[ -d "var/cache/man" ]] && chmod g+s var/cache/man -R
    [[ -f "etc/sudoers" ]] && chown root:root etc/sudoers
    [[ -f "etc/sudoers" ]] && chmod 440 etc/sudoers
    [[ -f "usr/bin/sudo" ]] && chown root:root usr/bin/sudo
    [[ -f "usr/bin/sudo" ]] && chmod 4755 usr/bin/sudo
    # Fix focal permissions
    [[ -f "usr/lib/sudo/sudoers.so" ]] && chown 0 usr/lib/sudo/sudoers.so
    [[ -f "usr/lib/sudo/sudoers.so" ]] && chmod 644 usr/lib/sudo/sudoers.so
    [[ -f "usr/lib/policykit-1/polkit-agent-helper-1" ]] && chmod 4755 usr/lib/policykit-1/polkit-agent-helper-1
    # Fix jammy permissions
    [[ -f "usr/libexec/sudo/sudoers.so" ]] && chown 0 usr/libexec/sudo/sudoers.so
    [[ -f "usr/libexec/sudo/sudoers.so" ]] && chmod 644 usr/libexec/sudo/sudoers.so
    [[ -f "usr/libexec/polkit-agent-helper-1" ]] && chmod 4755 usr/libexec/polkit-agent-helper-1

    # Rebuild symbolic link files (ln -sf ${target} ${symbolic_link_file})
    ln -sf /usr/bin bin
    ln -sf /usr/lib lib
    ln -sf /usr/sbin sbin
    ln -sf /run/lock var/lock
    ln -sf /run var/run
    ln -sf /usr/share/zoneinfo/Asia/Shanghai etc/localtime
    ln -sf /usr/sbin/armbian-ddbr usr/sbin/ddbr

    # Add custom firmware information
    echo "PLATFORM='rockchip'" >>${ophub_release_file} 2>/dev/null
    echo "SOC='${SOC}'" >>${ophub_release_file} 2>/dev/null
    echo "MODEL_NAME='${MODEL_NAME}'" >>${ophub_release_file} 2>/dev/null
    echo "FDTFILE='${FDTFILE}'" >>${ophub_release_file} 2>/dev/null
    echo "BOOTLOADER_IMG='/usr/lib/u-boot/${BOOTLOADER_IMG}'" >>${ophub_release_file} 2>/dev/null
    echo "MAINLINE_UBOOT='/usr/lib/u-boot/${MAINLINE_UBOOT}'" >>${ophub_release_file} 2>/dev/null
    echo "VERSION_CODEID='${release_codeid}'" >>${ophub_release_file} 2>/dev/null
    echo "VERSION_CODENAME='${release_codename}'" >>${ophub_release_file} 2>/dev/null
    echo "KERNEL_VERSION='${kernel}'" >>${ophub_release_file} 2>/dev/null
    echo "KERNEL_BRANCH='${KERNEL_BRANCH}'" >>${ophub_release_file} 2>/dev/null
    echo "FAMILY='${FAMILY}'" >>${ophub_release_file} 2>/dev/null
    echo "BOARD='${board}'" >>${ophub_release_file} 2>/dev/null
    echo "ROOTFS_TYPE='${ROOTFS_TYPE}'" >>${ophub_release_file} 2>/dev/null
    echo "BOOT_CONF='armbianEnv.txt'" >>${ophub_release_file} 2>/dev/null
    echo "DISK_TYPE='tf'" >>${ophub_release_file} 2>/dev/null
    echo "PACKAGED_DATE='$(date +%Y-%m-%d)'" >>${ophub_release_file} 2>/dev/null

    # Edit the etc/fstab
    [[ -f "etc/fstab" ]] || error_msg "The etc/fstab File does not exist."
    sed -i "s|LABEL=ROOTFS.*|UUID=${ROOTFS_UUID}  /      ${ROOTFS_TYPE}  ${fstab_string}  0 1|g" etc/fstab 2>/dev/null
    sed -i "s|LABEL=BOOT.*|UUID=${BOOT_UUID}      /boot  ext4            defaults         0 2|g" etc/fstab 2>/dev/null

    # Update release information
    [[ -f "${armbian_release_file}" ]] && {
        # Custom banner name
        sed -i "s|BOARD_NAME=.*|BOARD_NAME=\"${MODEL_NAME}\"|g" ${armbian_release_file} 2>/dev/null
        # Remove [ No end-user support ] prompt in [ /etc/update-motd.d/10-armbian-header ]
        sed -i "s|IMAGE_TYPE=.*|IMAGE_TYPE=stable|g" ${armbian_release_file} 2>/dev/null
    }

    # Clear quotes content for [ /etc/update-motd.d/35-armbian-tips ]
    quotes_file="etc/update-motd.d/quotes.txt"
    [[ -f "${quotes_file}" ]] && echo "" >${quotes_file}

    # Make the .bashrc take effect, Default shell settings file: /etc/default/useradd
    echo '[[ "${SHELL}" == *bash && -f "${HOME}/.bashrc" ]] && . ${HOME}/.bashrc' >>etc/profile

    # Explicitly disable resizing for [ /usr/lib/armbian/armbian-resize-filesystem ], use armbian-tf settings
    echo "no" >root/.no_rootfs_resize

    # Reduce network latency [ A start job is running for raise network interfaces (5 mins 1 sec) ]
    network_service="usr/lib/systemd/system/networking.service"
    sed -i "s|TimeoutStartSec=.*|TimeoutStartSec=10sec|g" ${network_service} 2>/dev/null

    # Add tasks that need to be executed on initial startup
    armbian_firstrun="usr/lib/armbian/armbian-firstrun"
    sed -i '/armbian-release/i\[ -f "/usr/sbin/armbian-fix" ] && . /usr/sbin/armbian-fix' ${armbian_firstrun} 2>/dev/null

    # Add network performance optimization
    [[ -f "usr/sbin/balethirq.pl" && -f "etc/balance_irq" && -f "etc/rc.local" ]] && {
        sed -i '/^exit 0/i\perl /usr/sbin/balethirq.pl' etc/rc.local 2>/dev/null
    }

    # Add custom startup script
    custom_startup_script="etc/custom_service/start_service.sh"
    [[ -f "${custom_startup_script}" && -f "etc/rc.local" ]] && {
        chmod +x ${custom_startup_script}
        sed -i '/^exit 0/i\bash /etc/custom_service/start_service.sh' etc/rc.local 2>/dev/null
    }

    # Enable ssh service
    ssh_config="etc/ssh/sshd_config"
    [[ -f "${ssh_config}" ]] && {
        sed -i "s|^#*Port .*|Port 22|g" ${ssh_config} 2>/dev/null
        sed -i "s|^#*PermitRootLogin .*|PermitRootLogin yes|g" ${ssh_config} 2>/dev/null
    }

    # Fix abnormal CPU temperature
    temp_file="usr/lib/armbian/armbian-allwinner-battery"
    [[ -f "${temp_file}" ]] && {
        insert_line="$(cat ${temp_file} | grep -n 'CPU_TEMP_OFFSET' | awk -F':' '{print $1}')"
        [[ -n "${insert_line}" ]] && {
            sed -i "${insert_line}i\        [[ \"\$(echo \${board_temp} | awk -F'.' '{print \$1}' | wc -c)\" -gt \"3\" ]] && board_temp=\${board_temp:0:2}" ${temp_file}
        }
    }

    # Get random macaddr
    mac_hexchars="0123456789ABCDEF"
    mac_end="$(for i in {1..6}; do echo -n ${mac_hexchars:$((${RANDOM} % 16)):1}; done | sed -e 's/\(..\)/:\1/g')"
    random_macaddr="00:20${mac_end}"

    # Set interfaces macaddr
    interfaces_file="etc/network/interfaces"
    [[ -f "${interfaces_file}" ]] && sed -i "s|hwaddress ether.*|hwaddress ether ${random_macaddr}:AA|g" ${interfaces_file}

    sync && sleep 3
}

clean_tmp() {
    process_msg " (5/5) Clear temp files."
    cd ${make_path}

    umount -f ${tmp_armbian} 2>/dev/null
    losetup -d ${loop_old} 2>/dev/null

    umount -f ${tag_bootfs} 2>/dev/null
    umount -f ${tag_rootfs} 2>/dev/null
    losetup -d ${loop_new} 2>/dev/null

    cd ${tmp_outpath}

    pigz -9f *.img && mv -f *.img.gz ${armbian_outputpath} && sync

    cd ${make_path}

    rm -rf ${tmp_dir} 2>/dev/null
}

loop_rebuild() {
    cd ${make_path}
    echo -e "${STEPS} Start building Armbian firmware..."

    j="1"
    for b in ${build_armbian[*]}; do

        # Determine kernel branch and list
        board="${b}"
        confirm_version
        if [[ "${KERNEL_BRANCH}" == "stable" ]]; then
            build_kernel="${stable_kernel[*]}"
        elif [[ "${KERNEL_BRANCH}" == "rk3588" ]]; then
            build_kernel="${rk3588_kernel[*]}"
        fi

        i="1"
        for k in ${build_kernel[*]}; do
            {
                kernel="${k}"

                # Rockchip rk3568 series, such as FastRhino R66S/R68S only support 6.0.y and above kernel
                [[ "${SOC,,}" == "rk3568" && "${kernel:0:1}" -ne "6" ]] && {
                    echo -e "(${j}.${i}) ${WARNING} ${board}(${SOC,,}) cannot use ${kernel} kernel, skip."
                    let i++
                    continue
                }
                
                echo -n "(${j}.${i}) Start building Armbian [ ${b} - ${k}(${KERNEL_BRANCH}) ]. "
                now_remaining_space="$(df -Tk ${make_path} | grep '/dev/' | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))"
                if [[ "${now_remaining_space}" -le "6" ]]; then
                    echo "Remaining space is less than 6G, exit this build."
                    break
                else
                    echo "Remaining space is ${now_remaining_space}G."
                fi

                # Execute the following functions in sequence
                extract_armbian
                make_image
                copy_files
                refactor_files
                clean_tmp

                echo -e "(${j}.${i}) Armbian build successfully. \n"
                let i++
            }
        done

        let j++
    done

    cd ${armbian_outputpath}

    # Generate sha256sum check file
    sha256sum * >sha256sums && sync
}

# Check script permission
[[ "$(id -u)" == "0" ]] || error_msg "Please run this script as root: [ sudo ./${0} ]"
# Show welcome and server start information
echo -e "${STEPS} Welcome to Rebuild Armbian for rockchip boxes!"
echo -e "${INFO} Server running on Ubuntu: [ Release: ${host_release} / Host: ${arch_info} ] \n"
echo -e "${INFO} Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
echo -e "${INFO} Server memory usage: \n$(free -h) \n"
echo -e "${INFO} Server space usage before starting to compile: \n$(df -hT ${make_path}) \n"
echo -e "${INFO} Setting parameters: [ ${@} ] \n"
#
# Initialize variables
init_var "${@}"
# Find rebuild files
find_armbian
# Download the dependency files
download_depends
# Download the latest kernel
[[ "${auto_kernel}" == "true" ]] && query_version
download_kernel
echo -e "${INFO} Armbian Board List: [ $(echo ${build_armbian[*]} | tr "\n" " ") ]"
echo -e "${INFO} Stable Kernel List: [ $(echo ${stable_kernel[*]} | tr "\n" " ") ]"
echo -e "${INFO} RK3588 Kernel List: [ $(echo ${rk3588_kernel[*]} | tr "\n" " ") ]"
echo -e "${INFO} ROOTFS Type: [ ${ROOTFS_TYPE} ] \n"
# Loop to rebuild armbian firmware
loop_rebuild
#
# Show server end information
echo -e "${STEPS} Server space usage after compilation: \n$(df -hT ${make_path}) \n"
echo -e "${SUCCESS} All process completed successfully."
# All process completed
wait
